package MK;

/**
 * @author Marina Knabbe
 */

import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;

import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import org.nd4j.linalg.dataset.DataSet;

public class App {
    public static final List<Integer> VALIED_INTEGER_LIST = new ArrayList<Integer>();
    public static ArrayList<Integer> track = new ArrayList<Integer>();
    public static int lstmLayerSize = 120;  //Number of units in each GravesLSTM layer
    public static int tbpttLength = 50;     //Length for truncated backpropagation through time. i.e., do parameter updates ever 50 characters
    public static int numEpochs = 4;        //Total number of training epochs
    public static int sampleSize = 50;      //Number of events generated by net after training

    public static void main(String[] args) throws Exception {
        //Sequence sequence = MidiSystem.getSequence(new File("C:\\Users\\Wolfgang\\Documents\\Marina\\Studium\\BA\\IntelliJ_code\\1stTest\\src\\main\\java\\MK\\furelise.mid"));
        //Sequence sequence = MidiSystem.getSequence(new File("C:\\Users\\Wolfgang\\Documents\\Marina\\Studium\\BA\\IntelliJ_code\\1stTest\\src\\main\\java\\MK\\bumbleb.mid"));
        Sequence sequence = MidiSystem.getSequence(new File("C:\\Users\\Wolfgang\\Documents\\Marina\\Studium\\BA\\IntelliJ_code\\1stTest\\src\\main\\java\\MK\\Yiruma_-_.mid"));

        MidiReader midiReader = new MidiReader(sequence);
        track = midiReader.readMidi2List();

        System.out.println("Number of events: " + track.size());
        System.out.print(track);
        System.out.print("\n");
        System.out.println("Midi file read.");

        LSTMNetwork net = new LSTMNetwork();

        System.out.println("Create Trainingsdata.");
        // create a dedicated list of possible inputs
        LinkedHashSet<Integer> validInputs = new LinkedHashSet<Integer>();
        for (int i : track){
            validInputs.add(i);
        }
        VALIED_INTEGER_LIST.addAll(validInputs);

        System.out.println("Track size: " + track.size());
        System.out.println("Valid Inputs: " + validInputs.size());
        System.out.println("Valid Input List: " + VALIED_INTEGER_LIST.size());

        DataSet trainingsData = net.createTrainingsData(VALIED_INTEGER_LIST, track);
        int nIn = VALIED_INTEGER_LIST.size();
        int nOut = VALIED_INTEGER_LIST.size();

       /* DataSet trainingsData = net.createTrainingsData(track);
        int nIn = track.size();
        int nOut = track.size();
        System.out.println("Input: " + nIn);
        System.out.println("Output: " + nOut);*/
        System.out.println("Data created.");

        System.out.println("Create Network.");
        MultiLayerNetwork multiNet = net.createNetwork(lstmLayerSize, tbpttLength, nIn, nOut);
        //net.printNetworkParams(multiNet);

        System.out.println("Train and test Network.");
        net.trainNetwork(numEpochs, trainingsData, multiNet, track, sampleSize, VALIED_INTEGER_LIST);
        //net.trainNetwork(numEpochs, trainingsData, multiNet, track, sampleSize);

        System.out.println("All done.");
    }

}